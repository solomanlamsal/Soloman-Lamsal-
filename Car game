<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Car Racing Game</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      margin: 0;
      overflow: hidden;
    }
    canvas {
      display: block;
    }
    #gameCanvas {
      background: linear-gradient(to bottom, #808080, #4d4d4d);
    }
    .score {
      position: absolute;
      top: 10px;
      left: 10px;
      color: white;
      font-size: 24px;
      z-index: 100;
      font-family: Arial, sans-serif;
    }
  </style>
</head>
<body>
  <div class="score">Score: <span id="score">0</span></div>
  <canvas id="gameCanvas"></canvas>

  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");

    // Responsive canvas setup
    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    window.addEventListener("resize", resizeCanvas);
    resizeCanvas();

    // Game variables
    const car = {
      width: 60,
      height: 120,
      x: canvas.width / 2 - 30,
      y: canvas.height - 150,
      speed: 10,
      color: "blue",
    };

    const obstacles = [];
    const obstacleWidth = 60;
    const obstacleHeight = 120;
    let gameSpeed = 5;
    let score = 0;
    let isGameOver = false;

    // Draw the car
    function drawCar() {
      ctx.fillStyle = car.color;
      ctx.fillRect(car.x, car.y, car.width, car.height);
    }

    // Create an obstacle
    function createObstacle() {
      const x = Math.random() * (canvas.width - obstacleWidth);
      obstacles.push({ x, y: -obstacleHeight });
    }

    // Draw obstacles
    function drawObstacles() {
      ctx.fillStyle = "red";
      obstacles.forEach((obstacle) => {
        ctx.fillRect(obstacle.x, obstacle.y, obstacleWidth, obstacleHeight);
        obstacle.y += gameSpeed;
      });
    }

    // Check collision
    function checkCollision() {
      for (let obstacle of obstacles) {
        if (
          car.x < obstacle.x + obstacleWidth &&
          car.x + car.width > obstacle.x &&
          car.y < obstacle.y + obstacleHeight &&
          car.y + car.height > obstacle.y
        ) {
          return true;
        }
      }
      return false;
    }

    // Update score
    function updateScore() {
      document.getElementById("score").textContent = score;
    }

    // Restart game
    function restartGame() {
      isGameOver = false;
      score = 0;
      gameSpeed = 5;
      car.x = canvas.width / 2 - car.width / 2;
      obstacles.length = 0;
      updateScore();
      updateGame();
    }

    // Main game loop
    function updateGame() {
      if (isGameOver) return;

      ctx.clearRect(0, 0, canvas.width, canvas.height);

      drawCar();
      drawObstacles();

      // Collision detection
      if (checkCollision()) {
        isGameOver = true;
        alert(`Game Over! Your score: ${score}`);
        restartGame();
        return;
      }

      // Remove out-of-bounds obstacles and update score
      obstacles.forEach((obstacle, index) => {
        if (obstacle.y > canvas.height) {
          obstacles.splice(index, 1);
          score++;
          updateScore();

          // Gradually increase game speed
          if (score % 10 === 0) gameSpeed += 0.5;
        }
      });

      // Generate obstacles randomly
      if (Math.random() < 0.02) createObstacle();

      requestAnimationFrame(updateGame);
    }

    // PC controls (Keyboard)
    document.addEventListener("keydown", (e) => {
      if (e.key === "ArrowLeft" && car.x > 0) car.x -= car.speed;
      if (e.key === "ArrowRight" && car.x + car.width < canvas.width) car.x += car.speed;
    });

    // Phone controls (Touch)
    canvas.addEventListener("touchstart", (e) => {
      const touchX = e.touches[0].clientX;
      if (touchX < canvas.width / 2 && car.x > 0) {
        car.x -= car.speed;
      } else if (touchX > canvas.width / 2 && car.x + car.width < canvas.width) {
        car.x += car.speed;
      }
    });

    // Start the game
    updateGame();
  </script>
</body>
</html>
